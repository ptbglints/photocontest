// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  JUDGE
  USER
}

model User {
  id          String   @id @default(uuid())
  userName    String   @unique @db.VarChar(254)
  email       String   @unique @db.VarChar(254)
  password    String   @db.VarChar(254)
  role        Role     @default(USER)
  isActive    Boolean  @default(false)
  profile     Profile?
  photos      Photo[]
  albums      Album[]
  lastLoginAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Profile {
  userId       String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String?  @db.VarChar(254)
  address      String?
  profilePhoto String?
  coverPhoto   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Photo {
  id          String       @id @default(uuid())
  title       String?      @db.VarChar(254)
  description String?
  path        String       @unique
  photoDetail PhotoDetail?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  albums      Album[]
  tags        Tag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

}

model PhotoDetail {
  photo        Photo   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId      String  @id @default(uuid())
  fileName     String  @unique
  originalName String
  mimeType     String
  encoding     String
  size         Int
  isPrivate    Boolean @default(false)
  views        Int?    @default(0)
  likes        Int?    @default(0)
  downloaded   Int?    @default(0)
  starRating   Float?  @default(0)
  cameraMake   String?
  cameraModel  String?
  shutterSpeed String?
  aperture     String?
  focalLength  String?
  iso          Int?
}

model Album {
  id             String   @id @default(uuid())
  title          String
  description    String?
  coverPhotoId   String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  isPrivate      Boolean  @default(false)
  isDownloadable Boolean  @default(false)
  photos         Photo[]
  tags           Tag[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @unique @db.VarChar(64)
  photos Photo[]
  albums Album[]
}

// model Contest {
//   id Int @id @default(autoincrement())
//   name String @db.VarChar(255)
//   description String
//   startdate DateTime @default(now())
//   enddate DateTime
//   winneruserid Int[]
//   winnerphotoid Photo[]
// }
