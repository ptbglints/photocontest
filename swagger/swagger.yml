openapi: 3.0.1
info:
  title: Yo!Photo ðŸ‘»
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
  - url: http://localhost:8000/api/v1
  - url: http://localhost:8000/api/v2
tags:
  - name: User
  - name: Profile
  - name: Photo
  - name: Album
paths:
  /users:
    get:
      tags:
        - User
      summary: Get all user
      description: >
        <img src="https://www.prisma.io/docs/static/8cbb3ea8b5fc961b73cd2e583313f3a9/a6d36/offset-skip-take.png" alt="drawing" width="400"/>

      operationId: getMany
      parameters:
        - name: skip
          in: query
          description: skip
          required: false
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: false
          schema:
            type: integer
            example: 50
            minimum: 0
            maximum: 100
      responses:
        "200":
          description: Return an array of user objects
          content:
            application/json:
              schema:
                type: array
                # items:
                # type: object
                # $ref: "#/components/schemas/User"
                $ref: "#/components/schemas/GetAllUsers200"

  /users/delete/id/{id}:
    delete:
      tags:
        - User
      summary: Delete sepecific user either by id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: userId, userName or email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/delete/username/{userName}:
    delete:
      tags:
        - User
      summary: Delete sepecific user by userName
      operationId: deleteUserByUserName
      parameters:
        - name: userName
          in: path
          description: userId, userName or email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/nested:
    get:
      tags:
        - User
      summary: Get all user include profile, album, photos and tags
      description: >
        <img src="https://www.prisma.io/docs/static/8cbb3ea8b5fc961b73cd2e583313f3a9/a6d36/offset-skip-take.png" alt="drawing" width="400"/>

      operationId: getManyNested
      parameters:
        - name: skip
          in: query
          description: skip
          required: false
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: false
          schema:
            type: integer
            example: 50
            minimum: 0
            maximum: 100
      responses:
        "200":
          description: Return an array of user objects
          content:
            application/json:
              schema:
                type: array
                # items:
                # type: object
                # $ref: "#/components/schemas/User"
                $ref: "#/components/schemas/GetAllUsers200"

  /users/id/{id}:
    get:
      tags:
        - User
      summary: Get specific user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
            example: 02252e26-64ff-45c2-9aa0-14ca5d7a0e70
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/UserProfileAlbum"

  /users/username/{userName}:
    get:
      tags:
        - User
      summary: Get specific user by username
      operationId: getUserByName
      parameters:
        - name: userName
          in: path
          description: userName
          required: true
          schema:
            type: string
            example: arman
      responses:
        "200":
          description: Return a user object
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/UserProfileAlbum"

  /users/signup:
    post:
      tags:
        - User
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: broto
                email:
                  type: string
                  example: broto@mantab.io
                password:
                  type: string
                  example: Pass123?
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /users/login:
    post:
      tags:
        - User
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginJSON"
            examples:
              userName arman:
                value:
                  userName: arman
                  password: Pass123?
              userName jhony:
                value:
                  userName: jhony
                  password: Pass123?
              userName alice:
                value:
                  userName: alice
                  password: Pass123?
              userName bob:
                value:
                  userName: bob
                  password: Pass123?
              email arman:
                value:
                  userName: arman@maulana.com
                  password: Pass123?
              email jhony:
                value:
                  userName: jhony@kawasaki.com
                  password: Pass123?
              email alice:
                value:
                  userName: alice@prisma.io
                  password: Pass123?
              email bob:
                value:
                  userName: bob@prisma.io
                  password: Pass123?
      responses:
        default:
          description: successful operation
          content: {}
  /users/password:
    put:
      tags:
        - User
      summary: Change user pasword
      operationId: changeUserPassword
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Newpass123?
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /users/profile/:
    get:
      tags:
        - Profile
      summary: Get all profiles
      parameters:
        - name: skip
          in: query
          description: skip
          required: false
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: false
          schema:
            type: integer
            example: 100
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
    put:
      tags:
        - Profile
      summary: Update users own profile
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 4
                name:
                  type: string
                  example: Arman Maulalan
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /users/profile/userid/{id}:
    get:
      tags:
        - Profile
      summary: Gets profile by userId
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: 4b6ddf52-40f9-4545-ab3a-bdd6eb44746b
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
  /users/profile/username/{username}:
    get:
      tags:
        - Profile
      summary: Gets specific profile by Username
      parameters:
        - name: username
          in: path
          description: User name
          required: true
          schema:
            type: string
            example: alice
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
  /photos:
    get:
      tags:
        - Photo
      summary: Get all photos from database with limit
      parameters:
        - name: limit
          in: query
          description: limit
          required: true
          schema:
            type: integer
            example: 50
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type: object
                      $ref: "#/components/schemas/Photo"
                      additionalProperties:
                        $ref: "#/components/schemas/PhotoDetail"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Photo
      summary: Update photo detail by photo Id
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: 0050580b-1a3e-452e-adb6-7618f36519a9
                title:
                  type: string
                  example: This is a new title
                description:
                  type: string
                  example: This should be a very long description
                tag:
                  type: string
                  format: csv
                  example: robot,kuda
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
  /photos/user/{id}:
    get:
      tags:
        - Photo
      summary: Get all photos from a specific user
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
  /photos/{photoId}:
    get:
      tags:
        - Photo
      summary: Get a specific photo by photo ID
      parameters:
        - name: photoId
          in: path
          description: photo ID
          required: true
          schema:
            type: string
            format: uuid
            example: 277dfc20-a881-4105-b344-1dfca911166b
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
  /photos/upload:
    post:
      tags:
        - Photo
      summary: Upload photo to collection User
      description: Logged user only
      operationId: uploadePhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: array
                  items:
                    type: string
                    format: binary
                  oneOf:
                    - minItems: 1
                      maxItems: 1
                    - minItems: 3
                      maxItems: 3
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /albums/galleryall:
    get:
      tags:
        - Album
      summary: Get one most updated album from all users, ordered by createdAt
      parameters:
        - name: skip
          in: query
          description: skip
          required: false
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: false
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
  /albums:
    post:
      tags:
        - Album
      summary: Create an album
      requestBody:
        description: Create an album
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Swimming in Sabana, Merauke
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Swimming in Sabana, Merauke
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
    get:
      tags:
        - Album
      summary: Get all albums in the database, with skip and take query, ordered by createdAt
      description: |
        Get all albums in the database, with skip and take query, ordered by createdAt
      parameters:
        - name: skip
          in: query
          description: skip
          required: true
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: true
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
    put:
      tags:
        - Album
      summary: Update detail of specific album, by album Id
      requestBody:
        description: Update detail of specific album, by album Id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDetail"
            example:
              albumId: f503adb6-3bd4-48a2-9b24-77eb1bae8238
              title: Flying in The Dark
              description: This is how I fly in the Dark
              coverPhotoId: 7
              isPrivate: true
              isDownloadable: true
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
  /albums/id/{albumId}:
    get:
      tags:
        - Album
      summary: Get a specific album by album id, include its photos
      parameters:
        - name: albumId
          in: path
          description: albumId
          required: true
          schema:
            type: string
            format: uuid
            example: 82b097b2-f349-42b3-8e1e-34ee8233b1f0
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/AlbumNested"
  /albums/userid/{userId}:
    get:
      tags:
        - Album
      summary: Get all albums from specific Username
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            type: string
            example: 4b6ddf52-40f9-4545-ab3a-bdd6eb44746b
        - name: skip
          in: query
          description: skip
          required: false
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: false
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
  /albums/username/{userName}:
    get:
      tags:
        - Album
      summary: Get all albums from specific Username
      parameters:
        - name: userName
          in: path
          description: username
          required: true
          schema:
            type: string
            example: arman
        - name: skip
          in: query
          description: skip
          required: true
          schema:
            type: integer
            example: 0
        - name: take
          in: query
          description: take
          required: true
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
  /albums/search/username/{string}:
    get:
      tags:
        - Album
      summary: Search all albums whose username contain certain string
      parameters:
        - name: string
          in: path
          description: username that contain string
          required: true
          schema:
            type: string
            example: arm
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
  /albums/search/title/{string}:
    get:
      tags:
        - Album
      summary: Search all albums by albums's name that contain certain string
      parameters:
        - name: string
          in: path
          description: album title that contain string
          required: true
          schema:
            type: string
            example: Dark
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Album"
                # $ref: "#/components/examples/Coord"
components:
  examples:
    ObjectLoginByUserName:
      value:
        username: arman
        password: Pass123?
    skip:
      value: 0
    take:
      value: 100
  schemas:
    GetAllUsers200:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Success
        result:
          # example:
          # $ref: "#/components/schemas/ArrayOfUsers"
          type: array
          items:
            type: object
            anyOf:
              - $ref: "#/components/schemas/User"
              - $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7f3ed61f-cd69-44c4-8a6e-fd723ff896ec
        userName:
          type: string
          example: kharefoot7
        email:
          type: string
          format: email
          example: mfudger7@hatena.ne.jp
        password:
          type: string
          example: $2a$10$71IM5uVMR5KE1skbUySVM.6ONjZ9wj1Rxq08FNRQjXiJSykqR445O
        role:
          type: string
          example: USER
        isActive:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          example: 2022-03-06T23:16:15.850Z
        createdAt:
          type: string
          format: date-time
          example: 2022-03-03T19:38:30.610Z
        updatedAt:
          type: string
          format: date-time
          example: 2020-01-16T12:43:16.000Z

    UserProfileAlbum:
      type: object
      properties:
        items:
          $ref: "#/components/schemas/User"
      additionalProperties:
        items:
          profile:
          type: object
          $ref: "#/components/schemas/Profile"
          album:
            type: object
            $ref: "#/components/schemas/Album"  



    Profile:
      type: object
      title: Profile
      properties:
        userId:
          type: string
          format: uuid
          example: 7f3ed61f-cd69-44c4-8a6e-fd723ff896ec
        name:
          type: string
          example: Harley Gaffer
        addres:
          type: string
          example: 00 Fremont Pass
        profilePhoto:
          type: string
          format: url
          example: https://randomuser.me/api/portraits/men/27.jpg
        coverPhoto:
          type: string
          format: url
          example: https://picsum.photos/id/8/800/600
        createdAt:
          type: string
          format: date-time
          example: 2020-03-28T11:37:03.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2020-03-28T13:48:38.000Z

    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: a40568c5-174f-4b34-8f9c-e0dedeab0cd8
        title:
          type: string
          example: Wrapsafe
        description:
          type: string
          example: Inverse encompassing extranet
        coverPhotoId:
          type: string
          format: uuid
          example: 00771301-989b-4599-aed0-b1a64dc2d23c
        isPrivate:
          type: boolean
          example: false
        isDownloadable:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: 2021-05-11T03:44:35.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2021-05-11T05:56:10.000Z

    Photo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 277dfc20-a881-4105-b344-1dfca911166b
        title:
          type: string
          example: Amblyrhynchus cristatus
        description:
          type: string
          example: Team-oriented real-time intranet
        path:
          type: string
          format: url
          example: https://picsum.photos/seed/28/800/600
        userId:
          type: string
          format: uuid
          example: 7f3ed61f-cd69-44c4-8a6e-fd723ff896ec
        createdAt:
          type: string
          format: date-time
          example: 2017-12-06T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2017-12-06T00:00:00.000Z


    PhotoDetail:
      type: object
      properties:
        photoId:
          type: string
          format: uuid
          example: 277dfc20-a881-4105-b344-1dfca911166b
        fileName:
          type: string
          example: 260d3b01-129c-4284-99a2-78a403041e9e
        originalName:
          type: string
          example: Venenatis.png
        mimeType:
          type: string
          example: image/png
        encoding:
          type: string
          example: base64
        size:
          type: integer
          example: 3390164
        isPrivate:
          type: boolean
          example: false
        views:
          type: integer
          example: 427
        likes:
          type: integer
          example: 14
        downloaded:
          type: integer
          example: 13
        starRating:
          type: integer
          example: 5
        cameraMake:
          type: string
          example: Ricoh
        cameraModel:
          type: string
          example: Hasselblad
        shutterSpeed:
          type: string
          example: 1/500
        aperture:
          type: string
          example: 35 mm
        focalLength:
          type: string
          example: 35 mm
        iso:
          type: integer
          example: 800

    PhotoIncludePhotoDetail:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/Photo'
      additionalProperties:
        anyOf:
          - $ref: '#/components/schemas/PhotoDetail'

    AlbumNested:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        coverPhotoId:
          type: string
        user:
          type: object
          $ref: "#/components/schemas/User"
        userId:
          type: integer
        isPrivate:
          type: boolean
        isDownloadable:
          type: boolean
        photos:
          type: object
          $ref: "#/components/schemas/Photo"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UpdateAlbumDetail:
      type: object
      properties:
        albumId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        coverPhotoId:
          type: string
        isPrivate:
          type: boolean
        isDownloadable:
          type: boolean
    SuccessResponseObject:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
    SuccessResponseArray:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            type: object
      example:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        code:
          type: string
        message:
          type: string
    LoginJSON:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
      example:
        userName: maksi
        password: Pass123?
